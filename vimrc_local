" init {{{
scriptencoding utf-8

" unable vimode
set nocompatible

" plugin dir
let s:pluginDir = glob(expand('$HOME/.vim/plugged'))
" }}}
" runtimepath {{{
" insert behind
"   set runtimepath+={dir},{dir}
" insert front
"   set runtimepath^={dir},{dir}
if has('mac') || has('unix')
  set runtimepath+=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
elseif has('win32') || has('win64')
  set runtimepath+=$HOME/.vim,$HOME/vimfiles,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/vimfiles/after
  set pythonthreehome=$PYTHONHOME
  set pythonthreedll=$PYTHONHOME/python36.dll
endif
" }}}
" Function {{{
" currentOS {{{
" get current os name.
" function CurrentOS()
"   let os = system('uname -o')
"   return os
" endfunction
" }}}
" call MyDictionary {{{
function! MyDict(dictList)
  if type(a:dictList) == 3
    let l:ext       = ".txt"
    let l:frontPath = $HOME."/.vim/vimfiles/dict/"

    for l:f in a:dictList
      let l:path = l:frontPath.l:f.l:ext

      if filereadable(expand(l:path))
        augroup dict_group
          autocmd!
          autocmd FileType l:f :set dictionary=l:path
        augroup END
      endif

    endfor
  endif
endfunction
" }}}
" SetDefaultWorkSpace {{{
function! SetDefaultWorkSpace()
  if filereadable(expand("%:p"))
    " to change the local directory, when file open.
    augroup defaultdir
      autocmd!
      if filereadable(expand("%:p"))
        autocmd BufReadPost * silent! lcd %:p:h
      endif
    augroup END
  else
    silent! lcd $HOME/Desktop
  endif
endfunction
" }}}
" }}}
" vim-plug {{{
call plug#begin('~/.vim/plugged')

" plugin Manager
Plug 'junegunn/vim-plug'

" Omni completion
if has('python3') || has('python')
  if has('nvim')
    Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
  else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
  endif
elseif has('lua')
  Plug 'Shougo/neocomplete.vim'
else
  Plug 'Shougo/neocomplcache.vim'
endif

" Plug 'Shougo/unite.vim'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
" Plug 'Shougo/vimfiler.vim'
" Plug 'Shougo/vimshell.vim'
" Plug 'Shougo/javacomplete'

Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
" Plug 'tpope/vim-dispatch'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
" Plug 'osyo-manga/vim-monster'

" Python
Plug 'davidhalter/jedi-vim'
Plug 'vim-scripts/python.vim'
Plug 'tmhedberg/SimpylFold'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'Glench/Vim-Jinja2-Syntax'

Plug 'vim-scripts/Align'
Plug 'docunext/closetag.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'AndrewRadev/splitjoin.vim'

" Ruby | perl style regex
Plug 'othree/eregex.vim'

" incsearch highlight ALL pattern matches.
Plug 'haya14busa/incsearch.vim'

" Checker
Plug 'scrooloose/syntastic'
" Plug 'w0rp/ale'

" Tree
Plug 'vimplugin/project.vim'
Plug 'scrooloose/nerdtree'

" Color scheme
" Plug 'altercation/vim-colors-solarized'
" Plug 'nanotech/jellybeans.vim'
Plug 'tomasr/molokai'

" whitespace
" Plug 'bronson/vim-trailing-whitespace'

" show diff
Plug 'mhinz/vim-signify'

" comment on | off
Plug 'tomtom/tcomment_vim'

" List properties, methods
Plug 'vim-scripts/taglist.vim'
" Plug 'majutsushi/tagbar'

" Markup
Plug 'tpope/vim-haml'
Plug 'mattn/emmet-vim'
Plug 'othree/html5.vim'
Plug 'othree/html5-syntax.vim'
Plug 'tpope/vim-markdown'
" Plug 'suan/vim-instant-markdown'

" jade syntax
Plug 'digitaltoad/vim-pug'
" Plug 'othree/xml.vim'
" Plug 'slim-template/vim-slim'
" Plug 'plasticboy/vim-markdown'

" Coffeescript | javascript
" javascript syntax
Plug 'othree/yajs.vim'
Plug 'mattn/jscomplete-vim'
Plug 'myhere/vim-nodejs-complete'
Plug 'kchmck/vim-coffee-script'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'mtscout6/vim-cjsx'
" Plug 'othree/javascript-libraries-syntax.vim'
" Plug 'othree/coffee-check.vim'

" javascript parameter complete
" Plug 'othree/jspc.vim'

" css
Plug 'hail2u/vim-css3-syntax'

" swift
Plug 'toyamarinyon/vim-swift'

" ps1
Plug 'PProvost/vim-ps1'

" dart
Plug 'dart-lang/dart-vim-plugin'

" golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" typescript
" Plug 'clausreinke/typescript-tools'
Plug 'leafgarland/typescript-vim'

" scala
" Plug 'derekwyatt/vim-scala'

" julia
Plug 'JuliaEditorSupport/julia-vim'

" .net required python2
" if(has('python'))
"   Plug 'OmniSharp/omnisharp-vim'
" endif

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" browser
" Plug 'tyru/open-browser.vim'

" calendar
" Plug 'itchyny/calendar.vim'

" table helper
Plug 'dhruvasagar/vim-table-mode'

" hl pair tag
if has('python3') || has('python')
  Plug 'Valloric/MatchTagalways'
endif

" Initialize plugin system
call plug#end()

" plug setting
let g:plug_window='topleft new'

filetype plugin indent on
syntax enable
" }}}
" Common Setting {{{
" auto change current dir
" set autochdir

" autoindent
set autoindent

" copy paste 2 clipboard
" set clipboard^=unnamed,unnamedplus

" smartindent
set smartindent

" using space not tab.
set expandtab

" encoding setting
set encoding=utf-8
set termencoding=utf-8

" fileencoding
" set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,sjis,euc-jp,iso-2022-jp

" line feed code
set fileformat=unix
set fileformats=unix,mac,dos

" showing invisible char.
" set listchars=tab:!.,trail:~,eol:$,extends:>,precedes:<,nbsp:%
set listchars=tab:!.,trail:~,extends:>,precedes:<,nbsp:%

" showing the line feed code.
set list

" disable backup filename.
set nobackup

" show line number.
set number

" showing cursor position.
set ruler

" number of autointent.
set shiftwidth=2

" number of tab intent.
set tabstop=2

" showing cmd.
set showcmd
" set noshowcmd

" showing phases.
set showmatch

" show window mode.
set showmode

" showing wild menu in cmdMode.
set wildmenu
set wildmode=longest,list,full

" wrap.
set wrap

if has("win32") || has("win64")
  " columns
  set columns=110
  " rows
  set lines=34
endif

" highlight matches with last search pattern
set hlsearch

" highlight match while typing search pattern
set incsearch

" fix backspace, arrow montion on mac platform.
if has("mac") || has("unix")
  set backspace=indent,eol,start
  imap <ESC>oA <ESC>ki
  imap <ESC>oB <ESC>ji
  imap <ESC>oC <ESC>li
  imap <ESC>oD <ESC>hi
endif

" folding.
set fdc=2
set fdm=marker
" set fdm=manual
" set fdm=intent
" set fdm=expr
" set fdm=syntax
" set fdm=diff

" toolbar, font
if has("gui_running")
  " disable gui toolbar.
  set guioptions-=t
  set guioptions-=T

  " disable gui menu.
  set guioptions-=m

  " disable right scrollbar
  set guioptions-=r
  set guioptions-=R

  " disable left scrollbar
  set guioptions-=l
  set guioptions-=L

  " disable bottom scrollbar
  set guioptions-=b

  " guifont
  " if has("win32") || has("win64")
    " set guifont=Ricty짜 Diminished짜 Discord:h14
    " set guifont=NotoSansCJKjp-Regular:h14
    " set guifont=Source짜 Code짜 Pro:h14
    " set guifont=Monaco:h14
    " set guifont=FixedSys:h14
  " endif
endif

" using grep.
set grepprg=internal

" default workspace
call SetDefaultWorkSpace()

" syntax
syntax on
syntax enable

set laststatus=2
set cmdheight=1
set noundofile

" ime
" 0 ja mode (Input Method)OFF
" 1 lmap: ON  im: OFF
" 2 lmap: OFF im: ON
" let &iminsert=2

" Fuck the fucking sucking win ime mode off.
if has("win32") || has("win64")
  " reset the ja ime
  " au BufNewFile,BufRead * set iminsert=0

  " fuckoff the ja ime mode.
  set noimdisable

  " fuckoff the ja ime mode when using cmdMode.
  set noimcmdline

  " fuckoff the ja ime mode when using insertMode.
  set iminsert=0

  " fuckoff the ja ime mode when using searching.
  set imsearch=0
  inoremap <silent> <ESC> <ESC><C-c>:set iminsert=0<CR>

  " fuckoff the ime mode and using eregex for searching.
  nnoremap / :set imsearch=0<CR>:M/
  nnoremap ? :set imsearch=0<CR>:M?
endif

" Auto save/loading of views
" au BufWinLeave ?* silent mkview
" au BufWinLeave ?* silent loadview

" enable 256 colors
set t_Co=256

" ColorScheme
set background=dark

" colorscheme blue
" colorscheme darkblue
" colorscheme default
" colorscheme delek
" colorscheme desert
" colorscheme elflord
" colorscheme evening
" colorscheme koehler
" colorscheme morning
" colorscheme murphy
" colorscheme pablo
" colorscheme peachpuff
" colorscheme ron
" colorscheme shine
" colorscheme slate
" colorscheme torte
" colorscheme zellner

if !empty(glob(s:pluginDir.'/jellybeans.vim'))
  " let g:jellybeans_overrides = {
  " \  'Todo': { 'guifg': '303030', 'guibg': 'f0f000',
  " \    'ctermfg': 'Black', 'ctermbg': 'Yellow',
  " \    'attr': 'bold' },
  " \}

  let g:jellybeans_use_lowcolor_black=0
  " let g:jellybeans_use_term_italics=1
  colorscheme jellybeans

" solarized
elseif !empty(glob(s:pluginDir.'/vim-colors-solarized'))
  let g:solarized_termcolors=256
  " let g:solarized_termcolors=16
  let g:solarized_termtrans=1
  " let g:solarized_degrade=0
  let g:solarized_bold=0
  let g:solarized_underline=0
  let g:solarized_italic=0
  let g:solarized_contrast='normal'
  let g:solarized_visibility='normal'
  let g:solarized_diffmode='high'
  colorscheme solarized

" molokai
elseif !empty(glob(s:pluginDir.'/molokai'))
  let g:molokai_original=1
  let g:rehash256=1
  colorscheme molokai
else
  colorscheme desert
endif

" Restore cursor to file position in previous editing session.
if has("autocmd")
  augroup resCur
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
  augroup END
endif

" Expand aliases, when using non-interactive shell.
if(filereadable(glob(expand('$HOME/.bash/bashenv'))))
  let $BASH_ENV = expand('$HOME/.bash/bashenv')
endif
"}}}
" Plugin Setting {{{
" Deoplete or Neocomplete {{{
" Use deoplete if python3 exists.
" Use NeoComplete if lua exists.
if has('python3') || has('python')
  let g:deoplete#enable_at_startup = 1

  if has('win32') || has('win64')
    if isdirectory($PYTHON_HOME)
      let g:python3_host_prog = glob(expand($PYTHON_HOME.'/python.exe'))
    endif
  endif

  " Use nvim-yarp library instead of neovim remote plugin feature.
  let g:deoplete#enable_yarp = 1

  " Refresh the candidates automatically.
  " g:deoplete#enable_refresh_always = 1

elseif has('lua')
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0

  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1

  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  " max value of pop-up menu. default: 100
  let g:neocomplete#max_list = 100

  let g:neocomplete#auto_completion_start_length = 2

  " Define dictionary.
  " let g:neocomplete#sources#dictionary#dictionaries = {
  "   \ 'default' : '',
  "   \ 'vimshell' : $HOME.'/.vimshell_hist',
  "   \ 'scheme' : $HOME.'/.gosh_completions'
  "   \ }

  " Define keyword.
  " if !exists('g:neocomplete#keyword_patterns')
  "   let g:neocomplete#keyword_patterns = {}
  " endif
  " let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  " inoremap <expr><C-g>     neocomplete#undo_completion()
  " inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  " inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  " function! s:my_cr_function()
  "   return neocomplete#close_popup() . "\<CR>"
  "   " For no inserting <CR> key.
  "   return pumvisible() ? neocomplete#close_popup() : "\<CR>"
  " endfunction

  " <TAB>: completion.
  " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " " <C-h>, <BS>: close popup and delete backword char.
  " inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  " inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  " inoremap <expr><C-y>  neocomplete#close_popup()
  " inoremap <expr><C-e>  neocomplete#cancel_popup()

  " Close popup by <Space>.
  " inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

  " For cursor moving in insert mode(Not recommended)
  " inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
  " inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
  " inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
  " inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"

  " Or set this.
  " let g:neocomplete#enable_cursor_hold_i = 1

  " Or set this.
  " let g:neocomplete#enable_insert_char_pre = 1

  " AutoComplPop like behavior.
  " let g:neocomplete#enable_auto_select=1

  " Shell like behavior(not recommended).
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  " if !exists('g:neocomplete#sources#omni#input_patterns')
  "   let g:neocomplete#sources#omni#input_patterns = {}
  " endif
  "
  " if !exists('g:neocomplete#force_omni_input_patterns')
  "   let g:neocomplete#force_omni_input_patterns = {}
  " endif

  " let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
  " let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  " let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  " let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
  " let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
  " let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  " let g:neocomplete#sources#omni#input_patterns.perl='[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

  " For smart TAB completion.
  " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :
  "         \ <SID>check_back_space() ? "\<TAB>" :
  "         \ neocomplete#start_manual_complete()
  "   function! s:check_back_space()
  "     let col = col('.') - 1
  "     return !col || getline('.')[col - 1]  =~ '\s'
  "   endfunction
endif
" }}}
" Airline {{{
let g:airline_theme='badwolf'
" let g:airline_powerline_fonts=1
let g:airline_symbols_ascii=1
let g:airline_linecolumn_prefix=''
let g:airline_extensions = []
" let g:airline#extensions#tabline#enabled=1
" let g:airline#extensions#tabline#show_splits=1
" let g:airline#extensions#tabline#show_buffers=1
" let g:airline#extensions#tabline#show_tab_type=1
" let g:airline#extensions#tabline#show_tabs=1
" let g:airline#extensions#tabline#show_close_button=0
" let g:airline#extensions#whitespace#enabled=0
" }}}
" Neosnippet {{{
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility=1
" let g:neosnippet#snippets_directory=$HOME."/.vim/bundle/vim-snippets/snippets"
let g:neosnippet#snippets_directory=$HOME."/.vim/snippets"

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

if has('conceal')
  set conceallevel=0 concealcursor=niv
endif
" }}}
" Project {{{
let g:proj_flags="imstvn"

" let g:proj_width="4"

" if getcwd() != $HOMEPATH
"   if filereadable(getcwd() . '/.vimprojects')
"     Project .vimprojects
"   endif
" endif
" }}}
" Syntastic {{{
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=1
let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_coffee_checkers=['eslint']
let g:syntastic_mode_map={'mode': 'passive', 'active_filetypes': ['ruby']}
" let g:syntastic_ruby_checkers=['rubocop']
" }}}
" tpope/vim-markdown {{{
augroup tpope-vim-markdown
  au!
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
augroup END
" }}}
" vim-indent-guides {{{
" let g:indent_guides_auto_colors=0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
" hi IndentGuidesOdd  guibg=red   ctermbg=3
" hi IndentGuidesEven guibg=green ctermbg=4

" switch ON vim-indent-guides when start vim automatically.
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
" let g:indent_guides_start_level=2
" let g:indent_guides_auto_colors=0

" odd number intent color.
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#262626 ctermbg=gray

" even number intent color.
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#3c3c3c ctermbg=darkgray

" let g:indent_guides_color_change_percent=30
" }}}
" incsearch.vim {{{
let g:incsearch#auto_nohlsearch=1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" move the cursor to next | prev
" to next match. default: <Tab>
" <Over>(incsearch-next)
" to prev match. default: <S-Tab>
" <Over>(incsearch-prev)

" scroll to the next | prev match.
" scroll to the next page match. default: <C-j>
" <Over>(incsearch-scroll-f)
" scroll to the previous page match. default: <C-k>
" <Over>(incsearch-scroll-b)
" }}}
" othree/javascript-libraries-syntax.vim {{{
" jquery, underscore, backbone, prelude, angularjs, angularui, react, flux, requirejs, sugar, jasmine, chai, handlebars
" let g:used_javascript_libs='jquery,underscore,backbone'
" augroup javascriptLibrariesSyntax
"   autocmd!
"   autocmd BufReadPre *.js let b:javascript_lib_use_jquery=1
"   autocmd BufReadPre *.js let b:javascript_lib_use_underscore=1
"   autocmd BufReadPre *.js let b:javascript_lib_use_backbone=1
"   autocmd BufReadPre *.js let b:javascript_lib_use_prelude=0
"   autocmd BufReadPre *.js let b:javascript_lib_use_angularjs=1:
" augroup END
" }}}
" othree/html5 {{{
let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 0
let g:html5_microdata_attributes_complete = 0
let g:html5_aria_attributes_complete = 1
" }}}
" taglist {{{
" nnoremap <silent> <F8> :TlistToggle<CR>

" show taglist on the right hand side.
" let Tlist_Use_Right_Window=1
" let Tlist_Show_One_File=1
" let Tlist_Sort_Type=1
" }}}
" open-browser {{{
" let g:netrw_nogx = 1
" nmap gx <Plug>(openbrowser-smart-search)
" vmap gx <Plug>(openbrowser-smart-search)
" }}}
" eregex {{{
" disable eeregex by default
" let g:eregex_default_enable=1

" to change the search delimiter
" let g:eregex_forward_delim='/'
" let g:eregex_backward_delim='?'

" To force case sensitive like perl re.
" let g:eregex_force_case=1
" nnoremap / :M/
" nnoremap ? :M?
" }}}
" jedi {{{
" let g:jedi#completions_enabled = 0
" let g:jedi#auto_initialization = 0
" let g:jedi#auto_vim_configuration = 0
" let g:jedi#use_tabs_not_buffers = 1

" "left", "right", "top", "bottom" or "winwidth"
" let g:jedi#use_splits_not_buffers = "left"

let g:jedi#popup_on_dot = 0
" let g:jedi#popup_select_first = 0
" let g:jedi#show_call_signatures = "1"

" let g:jedi#goto_command = "<leader>d"
" let g:jedi#goto_assignments_command = "<leader>g"
" let g:jedi#goto_definitions_command = ""
" let g:jedi#documentation_command = "K"
" let g:jedi#usages_command = "<leader>n"
" let g:jedi#completions_command = "<C-Space>"
" let g:jedi#rename_command = "<leader>r"

" speed up the completion
" let g:pymode_rope = 0

autocmd FileType python setlocal completeopt-=preview
" }}}
" SimpyFold {{{
" let g:SimpylFold_docstring_preview = 1
" let g:SimpylFold_docstring_preview = 0
" let g:SimpylFold_fold_docstring = 1
" let b:SimpylFold_fold_docstring = 1
" let g:SimpylFold_fold_import = 1
" let b:SimpylFold_fold_import = 1
" }}}
" ruby {{{
augroup augRuby
  autocmd!
  au BufNewFile,BufReadPost *.rb setfiletype ruby
  au FileType ruby setl autoindent
  au FileType ruby setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.erb setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
augroup END
" }}}
" python {{{
augroup augPython
  autocmd!
  au BufNewFile,BufReadPost *.py setfiletype python
  au FileType python setl autoindent
  au FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
  au FileType python setl expandtab shiftwidth=4 tabstop=4 softtabstop=4
augroup END
" }}}
" myautocmd {{{
augroup augShared
  autocmd!
  au BufNewFile,BufReadPost *.haml   setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.html   setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.htm    setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.xhtml  setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.xml    setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.sass   setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.scss   setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.css    setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.js     setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.jsx    setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.coffee setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.json   setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.yml    setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au BufNewFile,BufReadPost *.swift  setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au FileType go setl expandtab shiftwidth=2 tabstop=2 softtabstop=2
  au FileType go retab
augroup END
" }}}
" Private Dictionary {{{
" call MyDict(["java", "actionscript", "php", "python", "ruby"])
" }}}
" }}}
" KeyMapping {{{
" http://vim-jp.org/vimdoc-ja/map.html#map-overview
" redraw.
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
nnoremap <C-d><C-v> :vertical diffsplit 

" tab
nnoremap <silent> tt :<C-u>tabnew<CR>
nnoremap <silent> tx :<C-u>tabclose<CR>
nnoremap <silent> tk :<C-u>tabnext<CR>
nnoremap <silent> tj :<C-u>tabprevious<CR>
nnoremap <silent> th :<C-u>tabfirst<CR>
nnoremap <silent> tl :<C-u>tablast<CR>
nnoremap <silent> t1 :<C-u>tabn1<CR>
nnoremap <silent> t2 :<C-u>tabn2<CR>
nnoremap <silent> t3 :<C-u>tabn3<CR>
nnoremap <silent> t4 :<C-u>tabn4<CR>
nnoremap <silent> t5 :<C-u>tabn5<CR>
nnoremap <silent> t6 :<C-u>tabn6<CR>
nnoremap <silent> t7 :<C-u>tabn7<CR>
nnoremap <silent> t8 :<C-u>tabn8<CR>
nnoremap <silent> t9 :<C-u>tabn9<CR>

" coffeescript compile
nnoremap <silent> <C-c>c :silent make --no-header -bc<CR>
"}}}
