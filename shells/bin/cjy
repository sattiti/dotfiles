#!/usr/bin/env bash
# vim: ft=bash fenc=utf-8

set -eu

# func
usage(){
  local cmdname=$(basename $0)
  cat <<- EOL
Usage:
$cmdname [-f format] [-E encoding] FILE.

Options:
-f format      Convert format. Can be
               c2j (csv to json)
               c2y (csv to yaml)
               j2y (json to yaml)
               y2j (yaml 2 json)
               Default is c2y.
-h help        Show this message.
-E encoding    Specify the default encoding for input file.
               Default is utf-8.
EOL
  unset cmdname
  exit 1
}

csv2json() {
  ruby -rcsv -rjson -e "file=ARGV[0]; enc=ARGV[1]; \
  puts JSON.pretty_generate(CSV.read(file, {headers: true, encoding: enc}).map(&:to_hash))
  " $1 $2
}

csv2yaml() {
  ruby -rcsv -ryaml -e "file=ARGV[0]; enc=ARGV[1]; \
  puts CSV.read(file, {headers: true, encoding: enc}).map(&:to_hash).to_yaml
  " $1 $2
}

json2yaml() {
  ruby -rjson -ryaml -e "file=ARGV[0]; enc=ARGV[1]; \
  puts JSON.parse(File.read(file, {encoding: enc})).map(&:to_hash).to_yaml
  " $1 $2
}

yaml2json() {
  ruby -rjson -ryaml -e "file=ARGV[0]; enc=ARGV[1]; \
  puts JSON.pretty_generate(YAML.load_file(file, {encoding: enc}).map(&:to_hash))
  " $1 $2
}

# init
encoding="utf-8"
format="c2y"

# Parsing the given options.
while getopts :f:hE: OPT
do
  case $OPT in
    f) format="$OPTARG" ;;
    h) usage ;;
    E) encoding="$OPTARG" ;;
    *) usage ;;
  esac
done

# Fuck the given options off.
shift $(($OPTIND - 1))

# exit if FILE wasnt given.
if [ $# -lt 1 ]; then
  usage
fi

# convert file when ruby is available.
if [[ -f $1 ]]; then
  if [[ -x $(which ruby 2>&1) ]]; then
    case $format in
      c2j) csv2json $1 $encoding ;;
      c2y) csv2yaml $1 $encoding ;;
      j2y) json2yaml $1 $encoding ;;
      y2j) yaml2json $1 $encoding ;;
    esac
  else
    echo "ruby: not found."
  fi
else
  echo $1: no such file.
fi

# unset b4 exit.
unset encoding
unset format

exit 0
